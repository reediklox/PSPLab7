/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package book;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.ResultSet;

/**
 *
 * @author user
 */
public class InsertTable extends javax.swing.JFrame {
    private MyDBConnector mdbc;
    private java.sql.Statement stmt;
    private EditDialog dlg;
    
    /**
     * Creates new form InsertTable
     */
    public InsertTable() {
        try{
            mdbc = new MyDBConnector();
            mdbc.init();
            Connection conn = mdbc.getMyConnection();
            stmt = conn.createStatement();
            dlg = new EditDialog(this, true);
        } catch (SQLException  e){} 
        initComponents();
    }
    
    public ResultSet getResultFromBook()
    {
     ResultSet rs = null;
     try
     {
      rs = stmt.executeQuery("SELECT * FROM book");
     }
     catch(SQLException e){}
     return rs;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BookIDLabel = new javax.swing.JLabel();
        authorLabel = new javax.swing.JLabel();
        publish_yearLabel = new javax.swing.JLabel();
        book_nameLabel = new javax.swing.JLabel();
        book_genreLabel = new javax.swing.JLabel();
        BookIDField = new javax.swing.JTextField();
        authorField = new javax.swing.JTextField();
        publish_yearField = new javax.swing.JTextField();
        book_nameField = new javax.swing.JTextField();
        book_genreCombo = new javax.swing.JComboBox<>();
        SendButton = new javax.swing.JButton();
        CommentLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        BookTable = new javax.swing.JTable();
        EditButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(426, 630));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        BookIDLabel.setText("BookID");

        authorLabel.setText("author");

        publish_yearLabel.setText("publish_year");

        book_nameLabel.setText("book_name");

        book_genreLabel.setText("book_genre");

        BookIDField.setText("Ввод числа");
        BookIDField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BookIDFieldMouseClicked(evt);
            }
        });
        BookIDField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                BookIDFieldKeyTyped(evt);
            }
        });

        authorField.setText("Ввод текста");
        authorField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                authorFieldMouseClicked(evt);
            }
        });

        publish_yearField.setText("Ввод года (гггг)");
        publish_yearField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                publish_yearFieldMouseClicked(evt);
            }
        });
        publish_yearField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publish_yearFieldActionPerformed(evt);
            }
        });
        publish_yearField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                publish_yearFieldKeyTyped(evt);
            }
        });

        book_nameField.setText("Ввод текста");
        book_nameField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                book_nameFieldMouseClicked(evt);
            }
        });

        book_genreCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Классика", "Фантастика", "Детектив", "Роман", "Научный" }));
        book_genreCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                book_genreComboActionPerformed(evt);
            }
        });

        SendButton.setText("Send");
        SendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendButtonActionPerformed(evt);
            }
        });

        CommentLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CommentLabel.setText("Click the button to send data");

        ResultSet rs = getResultFromBook();
        BookTable.setModel(new BookTableModel(rs));
        mdbc.close(rs);
        BookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BookTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(BookTable);

        EditButton.setText("Edit");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(SendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(authorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(BookIDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(book_genreLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(book_nameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(publish_yearLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGap(83, 83, 83)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(authorField)
                                        .addComponent(publish_yearField, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                                        .addComponent(book_nameField)
                                        .addComponent(book_genreCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(BookIDField)))
                                .addComponent(CommentLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(EditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BookIDLabel)
                    .addComponent(BookIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(authorLabel)
                    .addComponent(authorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(publish_yearLabel)
                    .addComponent(publish_yearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(book_nameLabel)
                    .addComponent(book_nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(book_genreLabel)
                    .addComponent(book_genreCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SendButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CommentLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EditButton)
                    .addComponent(DeleteButton))
                .addGap(29, 29, 29))
        );

        setBounds(0, 0, 442, 640);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try 
        {
         mdbc.close(stmt.getResultSet());
         mdbc.destroy();
        }
        catch (SQLException ex){}
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void book_genreComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_book_genreComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_book_genreComboActionPerformed
    
    public String quotate(String content){
        return " '" + content + "' ";
    }
    
    private void SendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendButtonActionPerformed
        String BookID = BookIDField.getText();
        boolean check = true;
        for (int i =0; i < BookTable.getRowCount(); i++){
            if (BookTable.getValueAt(i, 0).toString().equals(BookID)){
                BookIDField.setText("Ошибка, повторяющееся значение!");
                check = false;
            }
        }
        if (check) {
            String author = authorField.getText();
            String publish_year = publish_yearField.getText();
            if (publish_year.length() > 4){
                publish_yearField.setText("Ошибка, колиество символов превышет 4!");
                check = false;
            }
            if (check) {
                String book_name = book_nameField.getText();
                String book_genre = (String)book_genreCombo.getSelectedItem();

                String insertStr = "";

                try{
                    insertStr = "INSERT INTO book VALUES ("
                            + quotate(BookID) + ","
                            + quotate(author) + ","
                            + quotate(publish_year) + ","
                            + quotate(book_name) + ","
                            + quotate(book_genre) + ")";
                    int done = stmt.executeUpdate(insertStr);
                    CommentLabel.setText("1 row inserted");
                    getContentPane().removeAll();
                    initComponents();

                } catch (SQLException e){
                    CommentLabel.setText("Error occured in inserting data");
                }
            }
        }
    }//GEN-LAST:event_SendButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        if (BookTable.getSelectedRowCount() > 0) {
            String BookID = (String)BookTable.getValueAt(BookTable.getSelectedRow(), 0);
            String insertStr = "";
            try{
                insertStr = "DELETE FROM book WHERE BookID=" + BookID;
                int done = stmt.executeUpdate(insertStr);
                CommentLabel.setText("1 row deleted");
                getContentPane().removeAll();
                initComponents();
            } catch (Exception e){
                CommentLabel.setText("Error occured in deleting data");
            }
        } else {
            CommentLabel.setText("You need to select at least one row!");
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        if (BookTable.getSelectedRowCount() > 0) {
            dlg.setBookID((String)BookTable.getValueAt(BookTable.getSelectedRow(), 0));
            dlg.setauthor((String)BookTable.getValueAt(BookTable.getSelectedRow(), 1));
            dlg.setpublish_year((String)BookTable.getValueAt(BookTable.getSelectedRow(), 2));
            dlg.setbook_name((String)BookTable.getValueAt(BookTable.getSelectedRow(), 3));
            dlg.setbook_genre((String)BookTable.getValueAt(BookTable.getSelectedRow(), 4));
            dlg.setVisible(true);
            try{
                String insertStr = "UPDATE book SET BookID="
                        + quotate(dlg.getBookID()) + "WHERE BookID=" +
                        (String)BookTable.getValueAt(BookTable.getSelectedRow(), 0);
                int done = stmt.executeUpdate(insertStr);

                insertStr = "UPDATE book SET author="
                        + quotate(dlg.getauthor()) + "WHERE BookID=" +
                        (String)BookTable.getValueAt(BookTable.getSelectedRow(), 0);
                done = stmt.executeUpdate(insertStr);

                insertStr = "UPDATE book SET publish_year="
                        + quotate(dlg.getpublish_year()) + "WHERE BookID=" +
                        (String)BookTable.getValueAt(BookTable.getSelectedRow(), 0);
                done = stmt.executeUpdate(insertStr);

                insertStr = "UPDATE book SET book_name="
                        + quotate(dlg.getbook_name()) + "WHERE BookID=" +
                        (String)BookTable.getValueAt(BookTable.getSelectedRow(), 0);
                done = stmt.executeUpdate(insertStr);

                insertStr = "UPDATE book SET book_ganre="
                        + quotate(dlg.getbook_genre()) + "WHERE BookID=" +
                        (String)BookTable.getValueAt(BookTable.getSelectedRow(), 0);
                done = stmt.executeUpdate(insertStr);

                getContentPane().removeAll();
                initComponents();
            } catch (Exception e){
                CommentLabel.setText("Error occured in editing data");
            }
        }else {
            CommentLabel.setText("You need to select at least one row!");
        }
    }//GEN-LAST:event_EditButtonActionPerformed

    private void BookTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BookTableMouseClicked
        if (BookTable.getSelectedRowCount() > 0){
            EditButton.setEnabled(true);
            DeleteButton.setEnabled(true);
        } else {
            EditButton.setEnabled(false);
            DeleteButton.setEnabled(false);
        }
    }//GEN-LAST:event_BookTableMouseClicked

    private void BookIDFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BookIDFieldMouseClicked
        if ("Ввод числа".equals(BookIDField.getText()) 
                | "Ошибка, повторяющееся значение!".equals(BookIDField.getText())){
            BookIDField.setText("");
        }
    }//GEN-LAST:event_BookIDFieldMouseClicked

    private void authorFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_authorFieldMouseClicked
        if ("Ввод текста".equals(authorField.getText())){
            authorField.setText("");
        }
    }//GEN-LAST:event_authorFieldMouseClicked

    private void publish_yearFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_publish_yearFieldMouseClicked
        if ("Ввод текста".equals(publish_yearField.getText())
                | "Ввод года (гггг)".equals(publish_yearField.getText())
                | "Ошибка, колиество символов превышет 4!".equals(publish_yearField.getText())){
            publish_yearField.setText("");
        }
    }//GEN-LAST:event_publish_yearFieldMouseClicked

    private void book_nameFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_book_nameFieldMouseClicked
        if ("Ввод текста".equals(book_nameField.getText())){
            book_nameField.setText("");
        }
    }//GEN-LAST:event_book_nameFieldMouseClicked

    private void BookIDFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BookIDFieldKeyTyped
        char c = evt.getKeyChar();
        
        if (!Character.isDigit(c)){
            evt.consume();
        }
    }//GEN-LAST:event_BookIDFieldKeyTyped
  
    
    private void publish_yearFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publish_yearFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_publish_yearFieldActionPerformed

    private void publish_yearFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_publish_yearFieldKeyTyped
        char c = evt.getKeyChar();
        
        if (!Character.isDigit(c)){
            evt.consume();
        }
    }//GEN-LAST:event_publish_yearFieldKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InsertTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InsertTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InsertTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InsertTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InsertTable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BookIDField;
    private javax.swing.JLabel BookIDLabel;
    public static javax.swing.JTable BookTable;
    private javax.swing.JLabel CommentLabel;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton EditButton;
    private javax.swing.JButton SendButton;
    private javax.swing.JTextField authorField;
    private javax.swing.JLabel authorLabel;
    private javax.swing.JComboBox<String> book_genreCombo;
    private javax.swing.JLabel book_genreLabel;
    private javax.swing.JTextField book_nameField;
    private javax.swing.JLabel book_nameLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField publish_yearField;
    private javax.swing.JLabel publish_yearLabel;
    // End of variables declaration//GEN-END:variables
}
